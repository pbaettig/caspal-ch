---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in two availability zones, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB

Parameters:
  Environment:
    Description: 'vpc environment'
    Type: String
    Default: base
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 10
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  DnsDomain:
    Description: 'DNS base domain used for env specific subdomains (with trailing dot!)'
    Type: String
    Default: caspal.ch.

Resources:
  # setup vpc with b network defined as parameter
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${Environment}-vpc'
  DhcpOptionSet:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !Sub ${DnsDomain}
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dhcp-opts'
  VpcDhcpOptionSetAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DhcpOptionSet
  # igw
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # create the public and private subnet for AZ A
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A public'
      - Key: Reach
        Value: public
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A private'
      - Key: Reach
        Value: private
  # create public and private subnet for AZ B
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Reach
        Value: public
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B private'
      - Key: Reach
        Value: private
  # create public and private subnet for AZ C
  SubnetCPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.64.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C public'
      - Key: Reach
        Value: public
  SubnetCPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.80.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C private'
      - Key: Reach
        Value: private
  # create routing tables for AZ A
  RouteTablePublicA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public AZ A
  RouteTablePrivateA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private AZ A
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublicA
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTablePrivateA
  # internet route via igw
  RouteTablePublicInternetRouteA:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicA
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # create routing tables for AZ B
  RouteTablePublicB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public AZ B
  RouteTablePrivateB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private AZ B
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublicB
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTablePrivateB
  # internet route via igw
  RouteTablePublicInternetRouteB:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicB
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # create routing tables for AZ C
  RouteTablePublicC:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public AZ C
  RouteTablePrivateC:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private AZ C
  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTablePublicC
  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTablePrivateC
  #internet route via igw
  RouteTablePublicInternetRouteC:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicC
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  #setup the network acls for our default subnets
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationCPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  DBSubnetGroupPublic:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Public DBSubnetGroup"
      SubnetIds:
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
        - !Ref SubnetCPublic
  DBSubnetGroupPrivate:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Private DBSubnetGroup"
      SubnetIds:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate
  CacheSubnetGroupPublic:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Public Elasticache Subnetgroup"
      SubnetIds:
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
        - !Ref SubnetCPublic
  CacheSubnetGroupPrivate:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Private Elasticache Subnetgroup"
      SubnetIds:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate
  # ElastiCache subnetgroups
  ECSubnetGroupPrivate:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Private ElastiCache Subnet Group"
      SubnetIds:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate


  DnsZonePublic:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Public zone"
      Name: !Ref DnsDomain

# all outputs and exports
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'vpc/vpc-2azs'
  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${Environment}-VPC-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${Environment}-VPC-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${Environment}-VPC-AZB'
  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${Environment}-VPC-AZC'
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${Environment}-VPC-ClassB'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${Environment}-VPC-ID'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic]]
    Export:
      Name: !Sub '${Environment}-VPC-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate, !Ref SubnetCPublic]]
    Export:
      Name: !Sub '${Environment}-VPC-SubnetsPrivate'
  RouteTablePrivateA:
    Description: 'Route table private AZ A.'
    Value: !Ref RouteTablePrivateA
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePrivateA'
  RouteTablePublicA:
    Description: 'Route table public AZ A.'
    Value: !Ref RouteTablePublicA
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePublicA'
  RouteTablePrivateB:
    Description: 'Route table private AZ B.'
    Value: !Ref RouteTablePrivateB
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePrivateB'
  RouteTablePublicB:
    Description: 'Route table public AZ B.'
    Value: !Ref RouteTablePublicB
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePublicB'
  RouteTablePrivateC:
    Description: 'Route table private AZ C.'
    Value: !Ref RouteTablePrivateC
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePrivateC'
  RouteTablePublicC:
    Description: 'Route table public AZ C.'
    Value: !Ref RouteTablePublicC
    Export:
      Name: !Sub '${Environment}-VPC-RouteTablePublicC'
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${Environment}-VPC-SubnetAPublic'
  SubnetAPublicCidr:
    Description: 'Subnet A public CIDR.'
    Value: !Sub '10.${ClassB}.0.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetAPublic-Cidr'
  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${Environment}-VPC-SubnetAPrivate'
  SubnetAPrivateCidr:
    Description: 'Subnet A private CIDR.'
    Value: !Sub '10.${ClassB}.16.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetAPrivate-Cidr'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${Environment}-VPC-SubnetBPublic'
  SubnetBPublicCidr:
    Description: 'Subnet B public CIDR.'
    Value: !Sub '10.${ClassB}.32.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetBPublic-Cidr'
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${Environment}-VPC-SubnetBPrivate'
  SubnetBPrivateCidr:
    Description: 'Subnet B private CIDR.'
    Value: !Sub '10.${ClassB}.48.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetBPrivate-Cidr'
  SubnetCPublic:
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${Environment}-VPC-SubnetCPublic'
  SubnetCPublicCidr:
    Description: 'Subnet C public CIDR.'
    Value: !Sub '10.${ClassB}.64.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetCPublic-Cidr'
  SubnetCPrivate:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${Environment}-VPC-SubnetCPrivate'
  SubnetCPrivateCidr:
    Description: 'Subnet C private CIDR.'
    Value: !Sub '10.${ClassB}.80.0/20'
    Export:
      Name: !Sub '${Environment}-VPC-SubnetCPrivate-Cidr'
  Ec2DefaultKeyName:
    Description: 'Name of default key for EC2 instances'
    Value: !Sub '${Environment}-admin'
    Export:
      Name: !Sub '${Environment}-EC2-DefaultKey'
  VpcCidrBlock:
    Description: 'CIDR block of VPC'
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub '${Environment}-VPC-CidrBlock'
  BaseDnsDomain:
    Description: 'Base DNS domain for this VPC'
    Value: !Ref DnsDomain
    Export:
      Name: !Sub '${Environment}-DNS-BaseDomain'
  DnsZonePublicId:
    Value: !Ref DnsZonePublic
    Export:
      Name: !Sub '${Environment}-DNS-PublicHostedZoneId'
  DBSubnetGroupPublic:
    Description: 'Public DBSubnetGroup'
    Value: !Ref DBSubnetGroupPublic
    Export:
      Name: !Sub '${Environment}-DBSubnetGroup-Public'
  DBSubnetGroupPrivate:
    Description: 'Private DBSubnetGroup'
    Value: !Ref DBSubnetGroupPrivate
    Export:
      Name: !Sub '${Environment}-DBSubnetGroup-Private'
  CacheSubnetGroupPublic:
    Description: 'Public ElastiCache Subnetgroup'
    Value: !Ref CacheSubnetGroupPublic
    Export:
      Name: !Sub '${Environment}-CacheSubnetGroup-Public'
  CacheSubnetGroupPrivate:
    Description: 'Private ElastiCache Subnetgroup'
    Value: !Ref CacheSubnetGroupPrivate
    Export:
      Name: !Sub '${Environment}-CacheSubnetGroup-Private'
  ECSubnetGroupPrivate:
    Description: 'Private ECSubnetGroup'
    Value: !Ref ECSubnetGroupPrivate
    Export:
      Name: !Sub '${Environment}-ECSubnetGroup-Private'

